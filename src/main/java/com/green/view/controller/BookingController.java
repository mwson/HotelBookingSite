package com.green.view.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.green.biz.booking.BookingService;
import com.green.biz.dto.BookingVO;
import com.green.biz.dto.MemberVO;
import com.green.biz.dto.RoomVO;
import com.green.biz.room.RoomService;

@Controller
public class BookingController {
	
	@Autowired
	private BookingService bookingService;
	@Autowired
	private RoomService roomService;
	
	// "사용자, 메인(예약하기)" 예약 검색
	@RequestMapping(value = "/booking_search")
	public String bookingSearch(BookingVO vo, Model model) {
		// 중복 조회
		String url = bookingCheck(vo, model);
		//String url = bookingCheck2(vo, model);
		
		// "객실목록" 조회
		roomList(model);		
		
		return url;
	}
	
	// "사용자, 예약하기(버튼)" 클릭으로 이동
	@RequestMapping(value = "/booking_button")
	public String bookingButton(BookingVO vo, Model model) {
		// "체크인, 체크아웃, 인원" 기본값 전달
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        Calendar cal = Calendar.getInstance();
        
        // "체크인" 오늘
        String today = sdf.format(cal.getTime());
        vo.setCheckin(today);
        
        // "체크아웃" 내일
        cal.add(Calendar.DATE, 1);
        String tomorrow = sdf.format(cal.getTime());
        vo.setCheckout(tomorrow);
        
        // "인원" 1명
        vo.setPeople(1);
        // 중복 조회
        String url = bookingCheck(vo, model);
		
        // "객실목록" 조회
     	roomList(model);
        
		return url;
	}
	
	// "사용자, 예약" rid1(스위트 룸) 결제
	@RequestMapping(value = "/booking_rid1")
	public String bookingSuite(HttpSession session, BookingVO vo, Model model) {
		MemberVO loginUser = (MemberVO)session.getAttribute("loginUser");
		
		if(loginUser == null) {
			return "member/login";
		} else {
			vo.setRid(1);
			// 객실 인원 확인(0: 불가능, 1: 가능)
			int peopleCheck = roomService.userCountPeopleList(vo);
			// 체크인, 체크아웃, 객실로 중복 확인(0: 가능, 1: 불가능)
			int bookingCheck = bookingService.countBookingCheck(vo);
			
			if(peopleCheck == 0) {
				return "booking/bookingCheckFail1";
			} else if(bookingCheck >= 1) {
				return "booking/bookingCheckFail2";
			} else {
				// 예약자 조회
				model.addAttribute("loginUser", loginUser);
				model.addAttribute("bookingVO", vo);
				
				// 룸 조회
				RoomVO roomVO = roomService.getRoom(vo.getRid());
				model.addAttribute("roomVO", roomVO);
				
				checkSubPriceCal(vo.getCheckin(), vo.getCheckout(), roomVO.getPrice(), model);
				
				return "booking/bookingPayment";
			}
		}
	}
	
	// "사용자, 예약" rid2(슈페리어 룸) 결제
	@RequestMapping(value = "/booking_rid2")
	public String bookingSuperior(HttpSession session, BookingVO vo, Model model) {
		MemberVO loginUser = (MemberVO)session.getAttribute("loginUser");
		
		if(loginUser == null) {
			return "member/login";
		} else {
			vo.setRid(2);
			// 객실 인원 확인(0: 불가능, 1: 가능)
			int peopleCheck = roomService.userCountPeopleList(vo);
			// 체크인, 체크아웃, 객실로 중복 확인(0: 가능, 1: 불가능)
			int bookingCheck = bookingService.countBookingCheck(vo);
			
			if(peopleCheck == 0) {
				return "booking/bookingCheckFail1";
			} else if(bookingCheck >= 1) {
				return "booking/bookingCheckFail2";
			} else {
				// 예약자 조회
				model.addAttribute("loginUser", loginUser);
				model.addAttribute("bookingVO", vo);
				
				// 룸 조회
				RoomVO roomVO = roomService.getRoom(vo.getRid());
				model.addAttribute("roomVO", roomVO);
				
				checkSubPriceCal(vo.getCheckin(), vo.getCheckout(), roomVO.getPrice(), model);
				
				return "booking/bookingPayment";
			}
		}
	}
	
	// "사용자, 예약" rid3(디럭스 룸) 결제
	@RequestMapping(value = "/booking_rid3")
	public String bookingDeluxe(HttpSession session, BookingVO vo, Model model) {
		MemberVO loginUser = (MemberVO)session.getAttribute("loginUser");
		
		if(loginUser == null) {
			return "member/login";
		} else {
			vo.setRid(3);
			// 객실 인원 확인(0: 불가능, 1: 가능)
			int peopleCheck = roomService.userCountPeopleList(vo);
			// 체크인, 체크아웃, 객실로 중복 확인(0: 가능, 1: 불가능)
			int bookingCheck = bookingService.countBookingCheck(vo);
			
			if(peopleCheck == 0) {
				return "booking/bookingCheckFail1";
			} else if(bookingCheck >= 1) {
				return "booking/bookingCheckFail2";
			} else {
				// 예약자 조회
				model.addAttribute("loginUser", loginUser);
				model.addAttribute("bookingVO", vo);
				
				// 룸 조회
				RoomVO roomVO = roomService.getRoom(vo.getRid());
				model.addAttribute("roomVO", roomVO);
				
				checkSubPriceCal(vo.getCheckin(), vo.getCheckout(), roomVO.getPrice(), model);
				
				return "booking/bookingPayment";
			}
		}
	}
	
	// "사용자, 예약" rid4(스탠다드 룸) 결제
	@RequestMapping(value = "/booking_rid4")
	public String bookingStandard(HttpSession session, BookingVO vo, Model model) {
		MemberVO loginUser = (MemberVO)session.getAttribute("loginUser");
		
		if(loginUser == null) {
			return "member/login";
		} else {
			vo.setRid(4);
			// 객실 인원 확인(0: 불가능, 1: 가능)
			int peopleCheck = roomService.userCountPeopleList(vo);
			System.out.println(peopleCheck);
			// 체크인, 체크아웃, 객실로 중복 확인(0: 가능, 1: 불가능)
			int bookingCheck = bookingService.countBookingCheck(vo);
			 
			if(peopleCheck == 0) {
				return "booking/bookingCheckFail1";
			} else if(bookingCheck >= 1) {
				return "booking/bookingCheckFail2";
			} else {
				// 예약자 조회
				model.addAttribute("loginUser", loginUser);
				model.addAttribute("bookingVO", vo);
				
				// 룸 조회
				RoomVO roomVO = roomService.getRoom(vo.getRid());
				model.addAttribute("roomVO", roomVO);
				
				checkSubPriceCal(vo.getCheckin(), vo.getCheckout(), roomVO.getPrice(), model);
				
				return "booking/bookingPayment";
			}
		}
	}
	
	// "사용자, 예약" 예약완료
	@RequestMapping(value = "/booking_complete")
	public String bookingComplete(HttpSession session, BookingVO vo, Model model) {
		MemberVO loginUser = (MemberVO)session.getAttribute("loginUser");
		
		if(loginUser == null) {
			return "member/login";
		} else {
			int bookingCheck = bookingService.countBookingCheck(vo);
			
			if(bookingCheck >= 1) {
				return "booking/bookingFail";
			} else {
				vo.setId(loginUser.getId());
				// vo.getBseq()에 bseq값 반환
				bookingService.insertBooking(vo);
				
				BookingVO bookingVO = bookingService.getBooking(vo.getBseq());
				model.addAttribute("bookingVO", bookingVO);

				checkSubPriceCal(bookingVO.getCheckin(), bookingVO.getCheckout(), bookingVO.getPrice(), model);
	
				return "booking/bookingComplete";
			}
		}
	}
	
	/*
	 * 모듈화
	 */
	// "사용자, 메인(예약하기)" 인원, 체크인, 체크아웃으로 중복 조회
	public String bookingCheck(BookingVO vo, Model model) {
		// 객실 번호(방 4개)
		int[] roomRid = new int[4];
		// 객실 인원 확인(방 4개)
		int[] roomCheck = new int[4];
		// 객실로 중복 확인 (jsp에서는 0: 가능, 1: 불가능)
		int bookingCheck = 1;
		
		for(int i=0; i<roomRid.length; i++) {
			vo.setRid(i + 1);
			// 객실 번호(1, 2, 3, 4)
			roomRid[i] = i + 1;
			// 객실 인원 확인(0: 불가능, 1: 가능)
			roomCheck[i] = roomService.userCountPeopleList(vo);
			
			// 인원으로 입실 가능(1)
			if(roomCheck[i] >= 1) {
				vo.setRid(roomRid[i]);
				// 체크인, 체크아웃, 객실로 중복 확인(0: 가능, 1: 불가능)
				bookingCheck = bookingService.countBookingCheck(vo);
				
				// 체크인, 체크아웃, 객실로 입실 불가능(1)
				if(bookingCheck >= 1) {
					model.addAttribute(("bookingRid" + (roomRid[i])), bookingCheck);
				// 체크인, 체크아웃, 객실로 입실 가능(0)
				} else {
					model.addAttribute(("bookingRid" + (roomRid[i])), bookingCheck);
				}
			// 인원으로 입실 불가능(0)
			} else {
				// jsp에서는 0: 가능, 1: 불가능
				bookingCheck = 1;
				
				model.addAttribute(("bookingRid" + (roomRid[i])), bookingCheck);
			}
		}

		return "booking/bookingSearch";
	}
	
	// "객실목록" 조회
	public void roomList(Model model) {
		RoomVO[] roomRid = new RoomVO[4];
		
		for(int i=0; i<roomRid.length; i++) {
			roomRid[i] = roomService.getRoom(i + 1);

			model.addAttribute(("roomRid" + (i + 1)), roomRid[i]);
		}
	}
	
	// "체크인, 체크아웃" (yyyyMMdd) 자르기
	public String checkSubstring(String checkinout) {		
		String yyyy = checkinout.substring(0, 4);
		String MM = checkinout.substring(5, 7);
		String dd = checkinout.substring(8, 10);
		
		String checkinout_sub = (yyyy + "" + MM + "" + dd + "");
		
		return checkinout_sub;
	}
	
	// "체크인, 체크아웃" (년, 월, 일) 변환
	public String checkConversion(String checkinout) {
		String yyyy = checkinout.substring(0, 4);
		String MM = checkinout.substring(4, 6);
		String dd = checkinout.substring(6);
		
		String checkinout_con = (yyyy + "년 " + MM + "월 " + dd + "일");
		
		return checkinout_con;
	}
	
	// "체크인, 체크아웃" 날짜 계산 
	public long checkCalculation(String checkin, String checkout) {
		long checkinout_cal = 0;
		
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        try {
            Date sdf_checkin = sdf.parse(checkin);
            Date sdf_checkout = sdf.parse(checkout);
            
            checkinout_cal = (sdf_checkout.getTime() - sdf_checkin.getTime()) / (24 * 60 * 60 * 1000);
        } catch(ParseException e) {
            e.printStackTrace();
        }

        return checkinout_cal;
	}
	
	// "문자열, 요금" 계산 및 출력 
	public void checkSubPriceCal(String checkin, String checkout, int dayPrice, Model model) {
		// "체크인, 체크아웃" (yyyyMMdd) 자르기
		if(checkin.length() != 8) {
			checkin = checkSubstring(checkin);
		}
		if(checkout.length() != 8) {
			checkout = checkSubstring(checkout);
		}
		
		// "체크인, 체크아웃" (년, 월, 일) 변환
		String checkin_con = checkConversion(checkin);
		String checkout_con = checkConversion(checkout);
		model.addAttribute("checkin", checkin_con);
		model.addAttribute("checkout", checkout_con);
		
		// "체크인, 체크아웃" 날짜 계산 
		long checkinout_cal = checkCalculation(checkin, checkout);
		model.addAttribute("checkinout_cal", checkinout_cal);
		
		// 객실 요금(1박 요금 * 날짜) 계산
		long roomPrice = (long)(dayPrice * checkinout_cal);
		model.addAttribute("roomPrice", roomPrice);
		
		// 부가가치세 계산(객실요금 * 0.1)
		long vat = (long)(roomPrice * 0.1);
		model.addAttribute("vat", vat);
		
		// 총 요금 계산(객실요금 * 0.1)
		long totalPrice = (long)(roomPrice + vat);
		model.addAttribute("totalPrice", totalPrice);		
	}
	
}